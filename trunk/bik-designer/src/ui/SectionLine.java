/*
 * SectionLine.java
 *
 * Created on treðdiena, 2007, 18 aprîlis, 16:50
 */

package ui;


import bikdesigner.HibernateUtil;
import data.BikComment;
import data.BikObjType;
import data.BikSection;
import data.BikSubsection;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.geom.Line2D;
import java.util.Iterator;
import javax.swing.ProgressMonitor;
import javax.swing.SwingWorker;
import org.hibernate.HibernateException;

/**
 *
 * @author  mpurins
 */
public class SectionLine extends AbstractBikItemLine {
    
    /** Creates new form SectionLine */
    public SectionLine() {
        initComponents();
        // hide IDs
        tfId.setVisible(false);
        lId.setVisible(false);

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        expanderButton = new javax.swing.JToggleButton();
        tfCode = new javax.swing.JTextField();
        tfName = new javax.swing.JTextField();
        lId = new javax.swing.JLabel();
        tfId = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setPreferredSize(new java.awt.Dimension(700, 38));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        expanderButton.setText("+");
        expanderButton.setEnabled(false);
        expanderButton.setFocusPainted(false);
        expanderButton.setFocusable(false);
        expanderButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        expanderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expanderButtonActionPerformed(evt);
            }
        });

        add(expanderButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 12, 15, 15));

        tfCode.setEditable(false);
        tfCode.setFont(new java.awt.Font("Tahoma", 3, 14));
        tfCode.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        tfCode.setText("11");
        tfCode.setBorder(null);
        tfCode.setMinimumSize(new java.awt.Dimension(60, 20));
        tfCode.setNextFocusableComponent(tfName);
        tfCode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfCodeMouseClicked(evt);
            }
        });

        add(tfCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(63, 9, 30, -1));

        tfName.setEditable(false);
        tfName.setFont(new java.awt.Font("Tahoma", 3, 14));
        tfName.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        tfName.setText("jTextField1");
        tfName.setBorder(null);
        tfName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfNameMouseClicked(evt);
            }
        });

        add(tfName, new org.netbeans.lib.awtextra.AbsoluteConstraints(99, 9, 588, -1));

        lId.setText("ID:");
        add(lId, new org.netbeans.lib.awtextra.AbsoluteConstraints(455, 5, -1, -1));

        tfId.setEditable(false);
        tfId.setText("1234");
        add(tfId, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 0, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Folder-Documents-copy-32x32.png")));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 3, -1, -1));

    }// </editor-fold>//GEN-END:initComponents

    private void tfNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfNameMouseClicked
        selectLine(this);
    }//GEN-LAST:event_tfNameMouseClicked

    private void tfCodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfCodeMouseClicked
        selectLine(this);
    }//GEN-LAST:event_tfCodeMouseClicked

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        selectLine(this);
    }//GEN-LAST:event_formMouseClicked

    class Task extends SwingWorker<Void, Void> {
        
        private SectionLine sl;
        private ProgressMonitor pm;
        private int curParentIndex;
        
        public Task(SectionLine slval, ProgressMonitor pmval, int curParentIndexVal) {
            sl=slval;
            pm=pmval;
            curParentIndex=curParentIndexVal;
        }
        
        @Override
        public Void doInBackground() {
                int progresscounter=1;
                expanderButton.setText("-");
                pm.setMillisToPopup(0);
                pm.setNote("Meklçjam komponentes (solis 1/3)");
                
                sl.getMainWindow(sl).getHibernateSession().refresh(sl.getBikSection());
                Iterator subIt = getBikSection().getBikSubsectionCollection().iterator();
                int addIndex = curParentIndex+1;
                Boolean hd = sl.getMainWindow(sl).getViewHideDeleted();
                pm.setProgress(progresscounter);
                pm.setMaximum(getBikSection().getBikComments().size()+getBikSection().getBikSubsectionCollection().size());
                pm.setNote("Lâdçju nodaïas komentârus (solis 2/3)");
                
                Iterator commentsIt = getBikSection().getBikComments().iterator();
                while (commentsIt.hasNext()){
                    progresscounter +=1;
                    pm.setProgress(progresscounter);
                    BikComment comment = (BikComment) commentsIt.next();
                    if ( !(hd && comment.getDeleted()) ){
                        CommentLine commentL = new CommentLine();
                        HibernateUtil.getCurrentSession().refresh(comment);
                        commentL.setBikComment(comment);
                        sl.getParent().add(commentL,addIndex);
                        commentL.invalidate();
                        addIndex++;
                    }
                }
                
                
                while (subIt.hasNext()){
                    progresscounter +=1;
                    pm.setProgress(progresscounter);
                    BikSubsection subSe = (BikSubsection)subIt.next();
                    pm.setNote(subSe.getSection().getCode().trim()+"-"+subSe.getCode().trim()+
                            " " + subSe.getName().trim());
                    if ( !(hd && subSe.getDeleted()) ){
                        SubsectionLine subSec = new SubsectionLine();
                        sl.getMainWindow(sl).getHibernateSession().refresh(subSe);
                        subSec.setBikSubsection(subSe);
                        sl.getParent().add(subSec,addIndex);
                        addIndex++;
                    }
                
                }
                pm.setProgress(pm.getMaximum());
                sl.getParent().validate();
                return null;
        }
        
        @Override
        public void done() {
            pm.close();
            if (pm.isCanceled()) sl.getMainWindow(sl).setStatusText("Nodaïas saturs ielâdçts");
            
        }
    }

    private void expanderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expanderButtonActionPerformed
        selectLine(this);
        int curParentIndex;
        for (curParentIndex=0; curParentIndex<getParent().getComponentCount();curParentIndex++){
            if (getParent().getComponent(curParentIndex).equals(this)) break;
        }
        
        
        if (expanderButton.isSelected()) {
            ProgressMonitor pm = new ProgressMonitor(this, "Saòemu nodaïas datus no servera", 
                     "Lâdçju nodaïas saturu", 0, 3);
            
            Task t = new Task(this, pm, curParentIndex);
            t.execute();            
        } else {
            expanderButton.setText("+");
            while(getParent().getComponentCount()>curParentIndex+1){
                IBikItemLine il = (IBikItemLine) getParent().getComponent(curParentIndex+1);
                if (il.getBikDataObject().getObjType().equals(BikObjType.SECTION)) break;
                getParent().remove(curParentIndex+1);
            }
        }
        
    }//GEN-LAST:event_expanderButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton expanderButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lId;
    private javax.swing.JTextField tfCode;
    private javax.swing.JTextField tfId;
    private javax.swing.JTextField tfName;
    // End of variables declaration//GEN-END:variables
    
    public Boolean isPriceDefUser() {
        return false;
    }
    
    public BikSection getBikSection() {
        return (BikSection) this.getBikDataObject();
    }
    
    public void setBikSection(BikSection secVal){
        this.setBikDataObject(secVal);
        updateUiComponents();
    }
    
    public void updateUiComponents() {
        tfCode.setText(getBikSection().getCode());
        tfName.setText(getBikSection().getName());
        tfId.setText(getBikSection().getId().toString());
        expanderButton.setEnabled(true);
        expanderButton.setToolTipText("Sadaïu skaits:"+getBikSection().getBikSubsectionCollection().size());       
        decorateLine();
    }

    public void decorateLine() {
        // now let's color deleted items
        if (getBikSection().getDeleted()) {
            this.setBackground(deletedItemColor);
            tfCode.setBackground(deletedItemColor);
            tfName.setBackground(deletedItemColor);
        } else {
            this.setBackground(backgroundColor);
            tfCode.setBackground(backgroundColor);
            tfName.setBackground(backgroundColor);
        }
        
        if (getMainWindow(this)!=null && getMainWindow(this).getSelectedLine().equals(this)){
            this.setBackground(selectedLineBackgroundColor);
            tfCode.setBackground(selectedLineBackgroundColor);
            tfName.setBackground(selectedLineBackgroundColor);
        }

    }

    public void expand() {
        if (expanderButton.isSelected()) return ;
        expanderButton.setSelected(true);
        expanderButtonActionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,""));
    }
}


