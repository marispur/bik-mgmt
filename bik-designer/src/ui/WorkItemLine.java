/*
 * SectionLine.java
 *
 * Created on treðdiena, 2007, 18 aprîlis, 16:50
 */

package ui;

import data.BikObjType;
import data.BikSection;
import data.BikSubsection;
import data.BikWorkItem;
import data.BikWorkItemComponent;
import data.HistoryEvent;
import java.awt.event.ActionEvent;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.Date;
import java.util.Formatter;
import java.util.Iterator;
import javax.swing.JComponent;
import javax.swing.JTextField;
import javax.swing.text.JTextComponent;
import javax.swing.text.NumberFormatter;

/**
 *
 * @author  mpurins
 */
public class WorkItemLine extends AbstractBikItemLine {
    private NumberFormatter formatter;
    /** Creates new form SectionLine */
    public WorkItemLine() {
        initComponents();
        formatter = new NumberFormatter(new DecimalFormat("0.00"));
        // hide IDs
        tfId.setVisible(false);
        lId.setVisible(false);

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        expanderButton = new javax.swing.JToggleButton();
        tfCode = new javax.swing.JTextField();
        lId = new javax.swing.JLabel();
        tfId = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tfName = new javax.swing.JTextArea();
        tfSectionCode = new javax.swing.JTextField();
        tfMeasure = new javax.swing.JTextField();
        tfLabourNorm = new javax.swing.JTextField();
        tfLabourCost = new javax.swing.JTextField();
        tfLabour = new javax.swing.JTextField();
        tfMaterials = new javax.swing.JTextField();
        tfDepreciation = new javax.swing.JTextField();
        tfTotal = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setPreferredSize(new java.awt.Dimension(700, 75));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        expanderButton.setText("+");
        expanderButton.setEnabled(false);
        expanderButton.setFocusPainted(false);
        expanderButton.setFocusable(false);
        expanderButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        expanderButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                expanderButtonMouseClicked(evt);
            }
        });
        expanderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expanderButtonActionPerformed(evt);
            }
        });

        add(expanderButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(66, 27, 15, 15));

        tfCode.setText("11");
        tfCode.setEnabled(false);
        tfCode.setMinimumSize(new java.awt.Dimension(60, 20));
        tfCode.setNextFocusableComponent(tfName);
        tfCode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfCodeMouseClicked(evt);
            }
        });
        tfCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCodeActionPerformed(evt);
            }
        });
        tfCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfCodeFocusLost(evt);
            }
        });

        add(tfCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 5, 50, -1));

        lId.setText("WIid:");
        lId.setFocusable(false);
        add(lId, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        tfId.setEditable(false);
        tfId.setText("1234");
        tfId.setFocusable(false);
        add(tfId, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 35, -1));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(490, 45));
        tfName.setFont(fieldFont);
        tfName.setLineWrap(true);
        tfName.setRows(2);
        tfName.setWrapStyleWord(true);
        tfName.setEnabled(false);
        tfName.setPreferredSize(new java.awt.Dimension(104, 104));
        tfName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfNameMouseClicked(evt);
            }
        });
        tfName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfNameFocusLost(evt);
            }
        });
        tfName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfNameKeyPressed(evt);
            }
        });

        jScrollPane1.setViewportView(tfName);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 5, -1, -1));

        tfSectionCode.setEditable(false);
        tfSectionCode.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        tfSectionCode.setText("01-");
        tfSectionCode.setBorder(null);
        tfSectionCode.setFocusable(false);
        tfSectionCode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfSectionCodeMouseClicked(evt);
            }
        });

        add(tfSectionCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 10, 25, -1));

        tfMeasure.setText("m3");
        tfMeasure.setToolTipText("M\u0113ra vien\u012bba");
        tfMeasure.setEnabled(false);
        tfMeasure.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfMeasureMouseClicked(evt);
            }
        });
        tfMeasure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfMeasureActionPerformed(evt);
            }
        });
        tfMeasure.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfMeasureFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfMeasureFocusLost(evt);
            }
        });

        add(tfMeasure, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, 50, -1));

        tfLabourNorm.setEditable(false);
        tfLabourNorm.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        tfLabourNorm.setText("34,67");
        tfLabourNorm.setToolTipText("Laika norma, posma/st");
        tfLabourNorm.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        tfLabourNorm.setFocusable(false);
        tfLabourNorm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfLabourNormMouseClicked(evt);
            }
        });

        add(tfLabourNorm, new org.netbeans.lib.awtextra.AbsoluteConstraints(216, 54, 45, -1));

        tfLabourCost.setEditable(false);
        tfLabourCost.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        tfLabourCost.setText("0,9");
        tfLabourCost.setToolTipText("Likme, Ls/h");
        tfLabourCost.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        tfLabourCost.setFocusable(false);
        tfLabourCost.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfLabourCostMouseClicked(evt);
            }
        });

        add(tfLabourCost, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 54, 45, -1));

        tfLabour.setEditable(false);
        tfLabour.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        tfLabour.setText("123,874");
        tfLabour.setToolTipText("Darba izmaksa, Ls");
        tfLabour.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        tfLabour.setFocusable(false);
        tfLabour.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfLabourMouseClicked(evt);
            }
        });

        add(tfLabour, new org.netbeans.lib.awtextra.AbsoluteConstraints(363, 54, 57, -1));

        tfMaterials.setEditable(false);
        tfMaterials.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        tfMaterials.setText("100000,000");
        tfMaterials.setToolTipText("Materi\u0101li, Ls");
        tfMaterials.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        tfMaterials.setFocusable(false);
        tfMaterials.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfMaterialsMouseClicked(evt);
            }
        });

        add(tfMaterials, new org.netbeans.lib.awtextra.AbsoluteConstraints(442, 54, 57, -1));

        tfDepreciation.setEditable(false);
        tfDepreciation.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        tfDepreciation.setText("0,000373");
        tfDepreciation.setToolTipText("Nolietojums, Ls");
        tfDepreciation.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        tfDepreciation.setFocusable(false);
        tfDepreciation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfDepreciationMouseClicked(evt);
            }
        });

        add(tfDepreciation, new org.netbeans.lib.awtextra.AbsoluteConstraints(519, 54, 54, -1));

        tfTotal.setEditable(false);
        tfTotal.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        tfTotal.setText("129837,92");
        tfTotal.setToolTipText("Kop\u0101, Ls");
        tfTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        tfTotal.setFocusable(false);
        tfTotal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfTotalMouseClicked(evt);
            }
        });

        add(tfTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(613, 54, 81, -1));

        jLabel1.setText("Kop\u0101:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(586, 54, -1, -1));

        jLabel2.setText("A:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(507, 54, -1, -1));

        jLabel3.setText("M:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(429, 54, -1, -1));

        jLabel4.setText("D:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(354, 54, -1, -1));

        jLabel5.setText("ln:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(207, 54, 15, -1));

        jLabel6.setText("likme:");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 54, -1, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Folder-apps-copy-32x32.png")));
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(84, 18, -1, -1));

    }// </editor-fold>//GEN-END:initComponents

    private void tfNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfNameKeyPressed
        //pressing Enter key saves the record
        if (evt.getKeyCode()==10){
            // and does not allow new line to be inserted
            evt.consume();
            saveLine();
        }

    }//GEN-LAST:event_tfNameKeyPressed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        selectLine(this);
    }//GEN-LAST:event_formMouseClicked

    private void tfTotalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfTotalMouseClicked
        selectLine(this);
    }//GEN-LAST:event_tfTotalMouseClicked

    private void tfDepreciationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfDepreciationMouseClicked
        selectLine(this);
    }//GEN-LAST:event_tfDepreciationMouseClicked

    private void tfMaterialsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfMaterialsMouseClicked
        selectLine(this);
    }//GEN-LAST:event_tfMaterialsMouseClicked

    private void tfLabourMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfLabourMouseClicked
        selectLine(this);
    }//GEN-LAST:event_tfLabourMouseClicked

    private void tfLabourCostMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfLabourCostMouseClicked
        selectLine(this);
    }//GEN-LAST:event_tfLabourCostMouseClicked

    private void tfLabourNormMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfLabourNormMouseClicked
        selectLine(this);
    }//GEN-LAST:event_tfLabourNormMouseClicked

    private void tfMeasureMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfMeasureMouseClicked
        selectLine(this);
    }//GEN-LAST:event_tfMeasureMouseClicked

    private void tfMeasureFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfMeasureFocusLost
        saveLine();
    }//GEN-LAST:event_tfMeasureFocusLost

    private void tfMeasureFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfMeasureFocusGained
        selectLine(this);
    }//GEN-LAST:event_tfMeasureFocusGained

    private void tfMeasureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfMeasureActionPerformed
        saveLine();
    }//GEN-LAST:event_tfMeasureActionPerformed

    private void tfNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfNameMouseClicked
        selectLine(this);
    }//GEN-LAST:event_tfNameMouseClicked

    private void tfNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfNameFocusLost
        saveLine();
    }//GEN-LAST:event_tfNameFocusLost

    private void tfNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfNameFocusGained
        selectLine(this);
    }//GEN-LAST:event_tfNameFocusGained

    private void tfCodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfCodeMouseClicked
        selectLine(this);
    }//GEN-LAST:event_tfCodeMouseClicked

    private void tfCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfCodeFocusLost
        saveLine();
    }//GEN-LAST:event_tfCodeFocusLost

    private void tfCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfCodeFocusGained
        selectLine(this);
    }//GEN-LAST:event_tfCodeFocusGained

    private void tfCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCodeActionPerformed
        saveLine();
    }//GEN-LAST:event_tfCodeActionPerformed

    private void tfSectionCodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfSectionCodeMouseClicked
        selectLine(this);
    }//GEN-LAST:event_tfSectionCodeMouseClicked

    private void expanderButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_expanderButtonMouseClicked
        selectLine(this);
    }//GEN-LAST:event_expanderButtonMouseClicked

    private void expanderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expanderButtonActionPerformed
        saveLine();
        int curParentIndex;
        for (curParentIndex=0; curParentIndex<getParent().getComponentCount();curParentIndex++){
            if (getParent().getComponent(curParentIndex).equals(this)) break;
        }
        
        
        if (expanderButton.isSelected()) {
            expanderButton.setText("-");
            getMainWindow(this).getHibernateSession().refresh(getBikWorkItem());
            Iterator wicIt = getBikWorkItem().getBikWorkItemComponentCollection().iterator();
            int addIndex = curParentIndex+1;
            Boolean hd = getMainWindow(this).getViewHideDeleted();
            
            while (wicIt.hasNext()){
                BikWorkItemComponent wic = (BikWorkItemComponent)wicIt.next();
                if (wic.getDeleted()!=null && !(hd && wic.getDeleted()) ){
                    WorkItemComponentLine wicL = new WorkItemComponentLine();
                    getMainWindow(this).getHibernateSession().refresh(wic);
                    wicL.setBikWorkItemComponent(wic);
                    this.getParent().add(wicL,addIndex);
                    addIndex++;
                }
            }
        } else {
            expanderButton.setText("+");
            while(getParent().getComponentCount()>curParentIndex+1){
                IBikItemLine il = (IBikItemLine) getParent().getComponent(curParentIndex+1);
                if (il.getBikDataObject().getObjType().equals(BikObjType.SECTION) ||
                        il.getBikDataObject().getObjType().equals(BikObjType.SUBSECTION) ||
                        il.getBikDataObject().getObjType().equals(BikObjType.WORK_ITEM)
                        ) break;
                getParent().remove(curParentIndex+1);
            }
        }
    }//GEN-LAST:event_expanderButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton expanderButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lId;
    private javax.swing.JTextField tfCode;
    private javax.swing.JTextField tfDepreciation;
    private javax.swing.JTextField tfId;
    private javax.swing.JTextField tfLabour;
    private javax.swing.JTextField tfLabourCost;
    private javax.swing.JTextField tfLabourNorm;
    private javax.swing.JTextField tfMaterials;
    private javax.swing.JTextField tfMeasure;
    private javax.swing.JTextArea tfName;
    private javax.swing.JTextField tfSectionCode;
    private javax.swing.JTextField tfTotal;
    // End of variables declaration//GEN-END:variables

    public Boolean isPriceDefUser() {
        return false;
    }
    
    public BikWorkItem getBikWorkItem() {
        return (BikWorkItem) this.getBikDataObject();
    }
    public void setBikWorkItem(BikWorkItem wiVal){
        this.setBikDataObject(wiVal);
        updateUiComponents();
    }

    public void updateUiComponents() {
        tfCode.setEnabled(!getBikWorkItem().getDeleted());
        tfName.setEnabled(!getBikWorkItem().getDeleted());
        tfMeasure.setEnabled(!getBikWorkItem().getDeleted());

        tfName.setText(getBikWorkItem().getName());
        tfName.setCaretPosition(0);
        tfCode.setText(getBikWorkItem().getCode());
        tfMeasure.setText(getBikWorkItem().getMeasure());
        tfId.setText(getBikWorkItem().getId().toString());
        try {
            tfLabourNorm.setText(formatter.valueToString(getBikWorkItem().getLabourNorm()));
            tfLabourCost.setText(formatter.valueToString(getBikWorkItem().getLabourCost()));
            tfMaterials.setText(formatter.valueToString(getBikWorkItem().getMaterials()));
            tfDepreciation.setText(formatter.valueToString(getBikWorkItem().getDepreciation()));
            tfLabour.setText(formatter.valueToString(getBikWorkItem().getLabour()));
            tfTotal.setText(formatter.valueToString(
                    getBikWorkItem().getLabour().add(
                    getBikWorkItem().getMaterials().add(
                    getBikWorkItem().getDepreciation()))));
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
        expanderButton.setEnabled(true);
        expanderButton.setToolTipText("Darba sastâvdaïu skaits:"+getBikWorkItem().getBikWorkItemComponentCollection().size());
        tfSectionCode.setText(getBikWorkItem().getSubsection().getSection().getCode()+"-");
    }
    private void saveLine(){
        // now validate data
        if (tfCode.getText().length()>5) {
            getMainWindow(this).setStatusText("KÏÛDA: Darba kods ["+tfCode.getText()+"] neder. Garums nedrîkst pârsniegt 5 simbolus.");
            tfCode.requestFocus();
            return;
        }
        if (getBikWorkItem().getCode().equals(tfCode.getText()) &&
                getBikWorkItem().getName().equals(tfName.getText()) &&
                getBikWorkItem().getMeasure().equals(tfMeasure.getText()) ){
            return ;
        } else {
            //dirty record need to save
            // first save the history records because after save cannot see 
            // difference between state in db and memory
            if (!getBikWorkItem().getCode().equals(tfCode.getText())){
                HistoryEvent he = new data.HistoryEvent();
                he.setDate(new Date(System.currentTimeMillis()));
                he.setObjId(getBikWorkItem().getId());
                he.setObjType(getBikWorkItem().getObjType().getId());
                he.setFieldName("code");
                he.setMessage("Nomainîts kods");
                he.setModifiedBy(getMainWindow(this).getCurrentUser().getFullName());
                he.setNewVal(tfCode.getText().trim());
                he.setOldVal(getBikWorkItem().getCode());
                he.bikSave();
            }

            if (!getBikWorkItem().getName().equals(tfName.getText())){
                HistoryEvent he = new data.HistoryEvent();
                he.setDate(new Date(System.currentTimeMillis()));
                he.setObjId(getBikWorkItem().getId());
                he.setObjType(getBikWorkItem().getObjType().getId());
                he.setFieldName("name");
                he.setMessage("Nomainîts nosaukums");
                he.setModifiedBy(getMainWindow(this).getCurrentUser().getFullName());
                he.setNewVal(tfName.getText().trim());
                he.setOldVal(getBikWorkItem().getName());
                he.bikSave();
            }
            if (!getBikWorkItem().getMeasure().equals(tfMeasure.getText())){
                HistoryEvent he = new data.HistoryEvent();
                he.setDate(new Date(System.currentTimeMillis()));
                he.setObjId(getBikWorkItem().getId());
                he.setObjType(getBikWorkItem().getObjType().getId());
                he.setFieldName("measure");
                he.setMessage("Nomainîta mçra vienîba");
                he.setModifiedBy(getMainWindow(this).getCurrentUser().getFullName());
                he.setNewVal(tfMeasure.getText().trim());
                he.setOldVal(getBikWorkItem().getName());
                he.bikSave();
            }
            
            getBikWorkItem().setCode(tfCode.getText());
            getBikWorkItem().setName(tfName.getText());
            getBikWorkItem().setMeasure(tfMeasure.getText());
            getBikWorkItem().setDateModified(new Date(System.currentTimeMillis()));
            getBikWorkItem().setModifiedBy(getMainWindow(this).getCurrentUser().getFullName());
            getBikWorkItem().bikSave(getMainWindow(this).getHibernateSession());
        }
    }

    public void decorateLine() {
         // now let's color deleted items
        if (getBikWorkItem().getDeleted()) {
            this.setBackground(deletedItemColor);
            tfCode.setBackground(deletedItemColor);
            tfName.setBackground(deletedItemColor);
            tfDepreciation.setBackground(deletedItemColor);
            tfLabour.setBackground(deletedItemColor);
            tfTotal.setBackground(deletedItemColor);
            tfLabourNorm.setBackground(deletedItemColor);
            tfLabourCost.setBackground(deletedItemColor);
            tfMaterials.setBackground(deletedItemColor);
            tfMeasure.setBackground(deletedItemColor);
            tfSectionCode.setBackground(deletedItemColor);
            expanderButton.setBackground(deletedItemColor);
            return ;
        } else {
            this.setBackground(backgroundColor);
            tfCode.setBackground(editableFieldBackgroundColor);
            tfName.setBackground(editableFieldBackgroundColor);
            tfDepreciation.setBackground(backgroundColor);
            tfTotal.setBackground(backgroundColor);
            tfLabour.setBackground(backgroundColor);
            tfLabourNorm.setBackground(backgroundColor);
            tfLabourCost.setBackground(backgroundColor);
            tfMaterials.setBackground(backgroundColor);
            tfMeasure.setBackground(editableFieldBackgroundColor);
            tfSectionCode.setBackground(backgroundColor);
            expanderButton.setBackground(backgroundColor);
        }
        // now let's color selected line
        if (getMainWindow(this)!=null && getMainWindow(this).getSelectedLine().equals(this)){
            this.setBackground(selectedLineBackgroundColor);
            tfCode.setBackground(editableFieldBackgroundColor);
            tfName.setBackground(editableFieldBackgroundColor);
            tfDepreciation.setBackground(selectedLineBackgroundColor);
            tfLabour.setBackground(selectedLineBackgroundColor);
            tfLabourNorm.setBackground(selectedLineBackgroundColor);
            tfLabourCost.setBackground(selectedLineBackgroundColor);
            tfMaterials.setBackground(selectedLineBackgroundColor);
            tfMeasure.setBackground(editableFieldBackgroundColor);
            tfSectionCode.setBackground(selectedLineBackgroundColor);
            tfTotal.setBackground(selectedLineBackgroundColor);
            expanderButton.setBackground(selectedLineBackgroundColor);
        }
    }
    
    public void refreshChildren(){

        int curParentIndex;
        for (curParentIndex=0; curParentIndex<getParent().getComponentCount();curParentIndex++){
            if (getParent().getComponent(curParentIndex).equals(this)) break;
        }
        curParentIndex++; // we are interested in lines starting from next one.
        while (curParentIndex!=getParent().getComponentCount()){
            IBikItemLine childLine = (IBikItemLine)getParent().getComponent(curParentIndex);
            if (childLine.getBikDataObject().getObjType()==BikObjType.COMMENT || 
                    childLine.getBikDataObject().getObjType()==BikObjType.DEPRECIATION || 
                    childLine.getBikDataObject().getObjType()==BikObjType.DEPRECIATION_PERCENT || 
                    childLine.getBikDataObject().getObjType()==BikObjType.LABOUR || 
                    childLine.getBikDataObject().getObjType()==BikObjType.MATERIAL ) {
                childLine.updateUiComponents();
                childLine.decorateLine();
                curParentIndex++;
                
            } else break;
            
        }
        updateUiComponents();
    }
    
    public JTextComponent getDefaultFocusComponent() {
        return tfName;
    }

    public void expand() {
        if (expanderButton.isSelected()) return ;
        expanderButton.setSelected(true);
        expanderButtonActionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,""));
    }
}
