/*
 * SectionLine.java
 *
 * Created on treðdiena, 2007, 18 aprîlis, 16:50
 */

package ui;

import data.BikObjType;
import data.BikSection;
import data.BikSubsection;
import data.BikWorkItem;
import data.BikWorkItemComponent;
import data.HistoryEvent;
import data.IBikDataObject;
import data.PriceDef;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Date;
import java.util.Formatter;
import java.util.Locale;
import javax.swing.text.JTextComponent;
import javax.swing.text.NumberFormatter;

/**
 *
 * @author  mpurins
 */
public class WorkItemComponentLine extends AbstractBikItemLine implements IPriceDefUser {
    private NumberFormat formatter = null;
    private PriceDef currentPriceDef = null;
    
    /** Creates new form SectionLine */
    public WorkItemComponentLine() {
        initComponents();
        // formatter = new NumberFormatter(new DecimalFormat("0.0000"));
        formatter = NumberFormat.getNumberInstance(Locale.getDefault());
        formatter.setMaximumFractionDigits(4);
        formatter.setMinimumFractionDigits(4);
        formatter.setGroupingUsed(false);
        
        // hide IDs
        tfId.setVisible(false);
        lId.setVisible(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        lId = new javax.swing.JLabel();
        tfId = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tfName = new javax.swing.JTextArea();
        tfMeasure = new javax.swing.JTextField();
        tfPrice = new javax.swing.JTextField();
        tfQty = new javax.swing.JTextField();
        tfPriceDefId = new javax.swing.JTextField();
        tfTotal = new javax.swing.JTextField();
        selectPriceDefButton = new javax.swing.JButton();
        clearPriceDefButton = new javax.swing.JButton();
        lType = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setMinimumSize(new java.awt.Dimension(626, 23));
        setPreferredSize(new java.awt.Dimension(700, 23));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        lId.setText("WIcid:");
        lId.setFocusable(false);
        add(lId, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 0, -1, -1));

        tfId.setEditable(false);
        tfId.setText("1234");
        tfId.setFocusable(false);
        add(tfId, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 5, 35, -1));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(194, 24));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(194, 24));
        tfName.setFont(fieldFont);
        tfName.setLineWrap(true);
        tfName.setText("akl hflakjhs flkajhsd lfkjha sdjhfalskhflakjhs flkajhs ldfkjhasldfk hasdklfjh ");
        tfName.setWrapStyleWord(true);
        tfName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfNameMouseClicked(evt);
            }
        });
        tfName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfNameFocusLost(evt);
            }
        });
        tfName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfNameKeyPressed(evt);
            }
        });

        jScrollPane1.setViewportView(tfName);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(195, 1, 180, 18));

        tfMeasure.setText("m3");
        tfMeasure.setToolTipText("M\u0113ra vien\u012bba");
        tfMeasure.setEnabled(false);
        tfMeasure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfMeasureActionPerformed(evt);
            }
        });
        tfMeasure.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfMeasureFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfMeasureFocusLost(evt);
            }
        });

        add(tfMeasure, new org.netbeans.lib.awtextra.AbsoluteConstraints(375, 1, 50, 18));

        tfPrice.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        tfPrice.setText("34,67");
        tfPrice.setToolTipText("Cena, Ls / likme");
        tfPrice.setEnabled(false);
        tfPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPriceActionPerformed(evt);
            }
        });
        tfPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfPriceFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfPriceFocusLost(evt);
            }
        });

        add(tfPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 1, 60, 18));

        tfQty.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        tfQty.setText("0,9");
        tfQty.setToolTipText("Daudzums/laika norma, cilv.st.");
        tfQty.setEnabled(false);
        tfQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfQtyActionPerformed(evt);
            }
        });
        tfQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfQtyFocusGained(evt);
            }
        });

        add(tfQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 1, 57, 18));

        tfPriceDefId.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        tfPriceDefId.setText("123,874");
        tfPriceDefId.setToolTipText("Defin\u0113t\u0101s cenas ID");
        tfPriceDefId.setEnabled(false);
        tfPriceDefId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPriceDefIdActionPerformed(evt);
            }
        });
        tfPriceDefId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfPriceDefIdFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfPriceDefIdFocusLost(evt);
            }
        });

        add(tfPriceDefId, new org.netbeans.lib.awtextra.AbsoluteConstraints(555, 1, 50, 18));

        tfTotal.setEditable(false);
        tfTotal.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        tfTotal.setText("129837,92");
        tfTotal.setToolTipText("Kop\u0101, Ls");
        tfTotal.setBorder(null);
        tfTotal.setFocusable(false);
        tfTotal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfTotalMouseClicked(evt);
            }
        });

        add(tfTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(635, 1, 60, 18));

        selectPriceDefButton.setText("?");
        selectPriceDefButton.setToolTipText("Izv\u0113l\u0113ties cenu...");
        selectPriceDefButton.setEnabled(false);
        selectPriceDefButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        selectPriceDefButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectPriceDefButtonMouseClicked(evt);
            }
        });
        selectPriceDefButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectPriceDefButtonActionPerformed(evt);
            }
        });

        add(selectPriceDefButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(605, 1, 15, 18));

        clearPriceDefButton.setText("x");
        clearPriceDefButton.setToolTipText("Izv\u0113l\u0113ties cenu...");
        clearPriceDefButton.setEnabled(false);
        clearPriceDefButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        clearPriceDefButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearPriceDefButtonMouseClicked(evt);
            }
        });
        clearPriceDefButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPriceDefButtonActionPerformed(evt);
            }
        });

        add(clearPriceDefButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 1, 15, 18));

        lType.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lType.setText("Xy");
        add(lType, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 1, 20, 18));

    }// </editor-fold>//GEN-END:initComponents

    private void tfPriceDefIdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfPriceDefIdFocusGained
        selectLine(this);
        tfPriceDefId.select(0,tfPriceDefId.getText().length());
    }//GEN-LAST:event_tfPriceDefIdFocusGained

    private void tfQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfQtyActionPerformed
        saveLine();
    }//GEN-LAST:event_tfQtyActionPerformed

    private void tfPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPriceActionPerformed
        saveLine();
    }//GEN-LAST:event_tfPriceActionPerformed

    private void tfQtyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfQtyFocusGained
        selectLine(this);
        tfQty.select(0,tfQty.getText().length());
    }//GEN-LAST:event_tfQtyFocusGained

    private void tfPriceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfPriceFocusLost
        saveLine();
    }//GEN-LAST:event_tfPriceFocusLost

    private void tfPriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfPriceFocusGained
        selectLine(this);
        tfPrice.select(0,tfPrice.getText().length());
    }//GEN-LAST:event_tfPriceFocusGained

    private void tfPriceDefIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfPriceDefIdFocusLost
        saveLine();
    }//GEN-LAST:event_tfPriceDefIdFocusLost

    private void tfPriceDefIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPriceDefIdActionPerformed
        saveLine();
    }//GEN-LAST:event_tfPriceDefIdActionPerformed

    private void clearPriceDefButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearPriceDefButtonMouseClicked
        selectLine(this);
    }//GEN-LAST:event_clearPriceDefButtonMouseClicked

    private void selectPriceDefButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectPriceDefButtonMouseClicked
        selectLine(this);
    }//GEN-LAST:event_selectPriceDefButtonMouseClicked

    private void clearPriceDefButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPriceDefButtonActionPerformed
        tfPriceDefId.setText("");
        saveLine();
    }//GEN-LAST:event_clearPriceDefButtonActionPerformed

    private void selectPriceDefButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectPriceDefButtonActionPerformed
        selectLine(this);
        getMainWindow(this).showPriceDialog(this, tfPriceDefId.getText().trim());
    }//GEN-LAST:event_selectPriceDefButtonActionPerformed

    private void tfNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfNameKeyPressed
        tfName.setToolTipText(tfName.getText());

        //pressing Enter key saves the record
        if (evt.getKeyCode()==10){
            // and does not allow new line to be inserted
            evt.consume();
            saveLine();
        }

    }//GEN-LAST:event_tfNameKeyPressed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        selectLine(this);
    }//GEN-LAST:event_formMouseClicked

    private void tfTotalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfTotalMouseClicked
        selectLine(this);
    }//GEN-LAST:event_tfTotalMouseClicked

    private void tfMeasureFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfMeasureFocusLost
        saveLine();
    }//GEN-LAST:event_tfMeasureFocusLost

    private void tfMeasureFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfMeasureFocusGained
        selectLine(this);
        tfMeasure.select(0,tfMeasure.getText().length());
    }//GEN-LAST:event_tfMeasureFocusGained

    private void tfMeasureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfMeasureActionPerformed
        saveLine();
    }//GEN-LAST:event_tfMeasureActionPerformed

    private void tfNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfNameMouseClicked
        selectLine(this);
    }//GEN-LAST:event_tfNameMouseClicked

    private void tfNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfNameFocusLost
        saveLine();
    }//GEN-LAST:event_tfNameFocusLost

    private void tfNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfNameFocusGained
        selectLine(this);
        tfName.select(0,tfName.getText().length());;
    }//GEN-LAST:event_tfNameFocusGained
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearPriceDefButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lId;
    private javax.swing.JLabel lType;
    private javax.swing.JButton selectPriceDefButton;
    private javax.swing.JTextField tfId;
    private javax.swing.JTextField tfMeasure;
    private javax.swing.JTextArea tfName;
    private javax.swing.JTextField tfPrice;
    private javax.swing.JTextField tfPriceDefId;
    private javax.swing.JTextField tfQty;
    private javax.swing.JTextField tfTotal;
    // End of variables declaration//GEN-END:variables

    public Boolean isPriceDefUser() {
        if (getBikWorkItemComponent().getType()==BikObjType.DEPRECIATION_PERCENT.getId()) return false;
        return true;
    }
    
    public BikWorkItemComponent getBikWorkItemComponent() {
        return (BikWorkItemComponent) this.getBikDataObject();
    }
    public void setBikWorkItemComponent(BikWorkItemComponent wicVal){
        this.setBikDataObject(wicVal);
        updateUiComponents();
        decorateLine();
    }

    public void updateUiComponents() {
        BikWorkItemComponent wic = getBikWorkItemComponent();
        
        tfName.setText(wic.getName());
        tfName.setCaretPosition(0);
        tfMeasure.setText(wic.getMeasure());
        tfId.setText(wic.getId().toString());
        try {
            tfPrice.setText(formatter.format(wic.getUnitPrice().doubleValue()));
            tfQty.setText(formatter.format(wic.getQty().doubleValue()));
            if (getBikWorkItemComponent().getType().equals(BikObjType.DEPRECIATION.getId())) {
                tfTotal.setText(formatter.format(wic.getDepreciation().doubleValue()));
                lType.setText("A");
            }
            else if (getBikWorkItemComponent().getType().equals(BikObjType.DEPRECIATION_PERCENT.getId())) {
                tfTotal.setText(formatter.format(wic.getDepreciation().doubleValue()));
                lType.setText("A%");
            }
            else if (getBikWorkItemComponent().getType().equals(BikObjType.LABOUR.getId())) {
                tfTotal.setText(formatter.format(wic.getLabour().doubleValue()));
                lType.setText("D");
            }
            else if (getBikWorkItemComponent().getType().equals(BikObjType.MATERIAL.getId())) {
                tfTotal.setText(formatter.format(wic.getMaterials().doubleValue()));
                lType.setText("M");
            }
        } catch (NumberFormatException ex) {
            ex.printStackTrace();
        }
        
        if (wic.getPriceDef()!=null) tfPriceDefId.setText(wic.getPriceDef().getId().toString());
        else tfPriceDefId.setText(null);
        
        
        tfQty.setEnabled(!wic.getDeleted());
        if (getBikWorkItemComponent().getType().equals(BikObjType.LABOUR.getId()) ||
                getBikWorkItemComponent().getType().equals(BikObjType.DEPRECIATION_PERCENT.getId()) ) {

            selectPriceDefButton.setEnabled(false);
            tfPriceDefId.setEnabled(false);
            selectPriceDefButton.setVisible(false);
            tfPriceDefId.setVisible(false);
            clearPriceDefButton.setVisible(false);
        } else{
            selectPriceDefButton.setEnabled(!wic.getDeleted());
            tfPriceDefId.setEnabled(!wic.getDeleted());
        }
        
        if (getBikWorkItemComponent().getType().equals(BikObjType.DEPRECIATION_PERCENT.getId())){
            tfPrice.setVisible(false);
            tfMeasure.setVisible(false);
        }

        if (wic.getPriceDef()!=null && !wic.getDeleted()) {
            clearPriceDefButton.setEnabled(true);
            tfMeasure.setEnabled(false);
            tfPrice.setEnabled(false);
            tfName.setEnabled(false);
        } else {
            clearPriceDefButton.setEnabled(false);
            tfMeasure.setEnabled(!wic.getDeleted());
            tfPrice.setEnabled(!wic.getDeleted());
            tfName.setEnabled(!wic.getDeleted());
        }
        
        
        tfName.setToolTipText(tfName.getText());
    }
    private void saveLine(){
        BikWorkItemComponent wic = getBikWorkItemComponent();
        BigDecimal qty=null, price=null;
        
        // now validate data
        try {
            String str = tfQty.getText();
            qty = new BigDecimal(formatter.parse(str).doubleValue());
            
        } catch (ParseException ex ){
            getMainWindow(this).setStatusText("Nepareizi ievadîts daudzums ["+tfQty.getText()+"] iepriekðçjais daudzums - " + getBikWorkItemComponent().getQty());
            tfQty.requestFocus();
            return ;
        }
        
        try {
            price = new BigDecimal(formatter.parse(tfPrice.getText()).doubleValue());
        } catch (ParseException ex){
            getMainWindow(this).setStatusText("Nepareizi ievadîta cena ["+tfPrice.getText()+"] iepriekðçjâ cena - " + getBikWorkItemComponent().getUnitPrice());
            tfPrice.requestFocus();
            return ;
        }
        
        if (wic.getName().equals(tfName.getText()) &&
                wic.getMeasure().equals(tfMeasure.getText()) &&
                wic.getQty().doubleValue()==qty.doubleValue() &&
                wic.getUnitPrice().doubleValue()==price.doubleValue()){
            savePriceDef();
        } else {
            //dirty record need to save
            if (wic.getQty().doubleValue()!=qty.doubleValue()){
                HistoryEvent he = new data.HistoryEvent();
                he.setDate(new Date(System.currentTimeMillis()));
                he.setObjId(wic.getId());
                he.setObjType(wic.getObjType().getId());
                he.setFieldName("qty");
                he.setMessage("Mainîts daudzums");
                he.setModifiedBy(getMainWindow(this).getCurrentUser().getFullName());
                he.setNewVal(formatter.format(qty));
                he.setOldVal(formatter.format(wic.getQty()));
                he.bikSave();
            }

            if (wic.getUnitPrice().doubleValue()!=price.doubleValue()){
                HistoryEvent he = new data.HistoryEvent();
                he.setDate(new Date(System.currentTimeMillis()));
                he.setObjId(wic.getId());
                he.setObjType(wic.getObjType().getId());
                he.setFieldName("unit_price");
                he.setMessage("Mainîta cena");
                he.setModifiedBy(getMainWindow(this).getCurrentUser().getFullName());
                he.setNewVal(formatter.format(price));
                he.setOldVal(formatter.format(wic.getUnitPrice()));
                he.bikSave();
            }
            if (!wic.getName().equals(tfName.getText())){
                HistoryEvent he = new data.HistoryEvent();
                he.setDate(new Date(System.currentTimeMillis()));
                he.setObjId(wic.getId());
                he.setObjType(wic.getObjType().getId());
                he.setFieldName("name");
                he.setMessage("Nomainîts nosaukums");
                he.setModifiedBy(getMainWindow(this).getCurrentUser().getFullName());
                he.setNewVal(tfName.getText().trim());
                he.setOldVal(wic.getName());
                he.bikSave();
            }
            if (!wic.getMeasure().equals(tfMeasure.getText())){
                HistoryEvent he = new data.HistoryEvent();
                he.setDate(new Date(System.currentTimeMillis()));
                he.setObjId(wic.getId());
                he.setObjType(wic.getObjType().getId());
                he.setFieldName("measure");
                he.setMessage("Nomainîta mçra vienîba");
                he.setModifiedBy(getMainWindow(this).getCurrentUser().getFullName());
                he.setNewVal(tfMeasure.getText().trim());
                he.setOldVal(wic.getName());
                he.bikSave();
            }
            
            wic.setName(tfName.getText());
            wic.setQty(qty);
            wic.setUnitPrice(price);
            wic.setMeasure(tfMeasure.getText().trim());
            wic.setDateModified(new Date(System.currentTimeMillis()));
            wic.setModifiedBy(getMainWindow(this).getCurrentUser().getFullName());
            wic.bikSave(getMainWindow(this).getHibernateSession());
        }
        updateUiComponents();
        decorateLine();
        if (getWorkItemLine()!=null) getWorkItemLine().refreshChildren();
    }
    private void savePriceDef () {
        BikWorkItemComponent wic = getBikWorkItemComponent();

        // not all record types can have price def, but only materials and amortization
        if (wic.getType() == BikObjType.DEPRECIATION_PERCENT.getId() ||
                wic.getType() == BikObjType.LABOUR.getId()) return ;
        // now check if there are any changes in price definition
        if (tfPriceDefId.getText().trim().isEmpty() && wic.getPriceDef()==null) return ;
        if (wic.getPriceDef()!=null && !tfPriceDefId.getText().trim().isEmpty())
            if (wic.getPriceDef().getId().toString().equals(tfPriceDefId.getText().trim())) return ;

        if (tfPriceDefId.getText().trim().isEmpty()) {
            // ID cleared resetting PriceDef to null

            HistoryEvent he = new data.HistoryEvent();
            he.setDate(new Date(System.currentTimeMillis()));
            he.setObjId(wic.getId());
            he.setObjType(wic.getObjType().getId());
            he.setFieldName("price_def");
            he.setMessage("Dzçsta cenas definîcija");
            he.setModifiedBy(getMainWindow(this).getCurrentUser().getFullName());
            he.setNewVal("");
            he.setOldVal(wic.getPriceDef().getId().toString());
            he.bikSave();

            wic.clearPriceDef();
            wic.setDateModified(new Date(System.currentTimeMillis()));
            wic.setModifiedBy(getMainWindow(this).getCurrentUser().getFullName());
            wic.bikSave(getMainWindow(this).getHibernateSession());
            clearPriceDefButton.setEnabled(false);
        } else {
            PriceDef oldpd = wic.getPriceDef();
            if (wic.setPriceDef(tfPriceDefId.getText().trim())) {
                // all OK, save record
                HistoryEvent he = new data.HistoryEvent();
                he.setDate(new Date(System.currentTimeMillis()));
                he.setObjId(wic.getId());
                he.setObjType(wic.getObjType().getId());
                he.setFieldName("price_def");
                he.setMessage("Izmainîta cenas definîcija");
                he.setModifiedBy(getMainWindow(this).getCurrentUser().getFullName());
                he.setNewVal(tfPriceDefId.getText().trim());
                if (wic.getPriceDef()==null) he.setOldVal(""); 
                else he.setOldVal(wic.getPriceDef().getId().toString());
                he.bikSave();

                wic.setDateModified(new Date(System.currentTimeMillis()));
                wic.setModifiedBy(getMainWindow(this).getCurrentUser().getFullName());
                wic.bikSave(getMainWindow(this).getHibernateSession());
                clearPriceDefButton.setEnabled(true);

            } else {
                // wrong id, notify user
                getMainWindow(this).setStatusText("Nepareizs definçtâs cenas identifikators ["+tfPriceDefId.getText()+"]");
                if (oldpd!=null) tfPriceDefId.setText(oldpd.getId().toString());
                else tfPriceDefId.setText(null);
            }
        }
        
    }
    public void decorateLine() {
         // now let's color deleted items
        if (getBikWorkItemComponent().getDeleted()) {
            this.setBackground(deletedItemColor);
            tfName.setBackground(deletedItemColor);
            tfTotal.setBackground(deletedItemColor);
            tfMeasure.setBackground(deletedItemColor);
            return ;
        } else {
            this.setBackground(backgroundColor);
            tfName.setBackground(editableFieldBackgroundColor);
            tfTotal.setBackground(backgroundColor);
            tfMeasure.setBackground(editableFieldBackgroundColor);
        }
        // now let's color selected line
        if (getMainWindow(this)!=null && getMainWindow(this).getSelectedLine().equals(this)){
            this.setBackground(selectedLineBackgroundColor);
            tfName.setBackground(editableFieldBackgroundColor);
            tfMeasure.setBackground(editableFieldBackgroundColor);
            tfTotal.setBackground(selectedLineBackgroundColor);
        }
    }

    public void setPriceDefId(Integer pdId) {
        tfPriceDefId.setText(pdId.toString());
        saveLine();
    }
    
    public WorkItemLine getWorkItemLine(){
        int curParentIndex, wiIndex=0;
        if (getParent()==null) return null; // in case tree is collapsed and there is no parrent
        
        for (curParentIndex=0; curParentIndex<getParent().getComponentCount();curParentIndex++){
            if (((IBikItemLine)getParent().getComponent(curParentIndex)).getBikDataObject().getObjType()==BikObjType.WORK_ITEM)
                wiIndex = curParentIndex;
            if (getParent().getComponent(curParentIndex).equals(this)) break;
        }
        if (wiIndex>0) return (WorkItemLine)getParent().getComponent(wiIndex); 
        else return null;
    }
    
    public JTextComponent getDefaultFocusComponent() {
        return tfName;
    }

    public void expand() {
        return ;
    }

}
